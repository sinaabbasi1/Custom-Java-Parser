/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */

import java.io.PrintWriter;
import java.io.StringWriter;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.6.1 from the specification file <tt>Scanner.flex</tt>
 */
public class Scanner extends sym implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int STRING = 2;
	public static final int CHARLITERAL = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\7\1\3\1\2\1\111\1\112\1\1\16\7\4\0\1\3\1\72"
			+ "\1\24\1\0\1\6\1\102\1\76\1\25\1\57\1\60\1\5\1\100"
			+ "\1\66\1\23\1\21\1\4\1\10\1\16\1\103\1\15\1\104\1\17"
			+ "\1\107\1\105\1\106\1\11\1\75\1\65\1\71\1\67\1\70\1\74"
			+ "\1\0\3\14\1\110\1\22\1\20\5\6\1\12\13\6\1\13\2\6" + "\1\63\1\26\1\64\1\101\1\6\1\0\1\27\1\30\1\34\1\46"
			+ "\1\37\1\50\1\53\1\43\1\44\1\6\1\41\1\36\1\51\1\40" + "\1\35\1\52\1\6\1\33\1\31\1\32\1\45\1\54\1\55\1\47"
			+ "\1\42\1\56\1\61\1\77\1\62\1\73\6\7\1\113\32\7\2\0" + "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"
			+ "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0" + "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"
			+ "\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6" + "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6\1\0\46\6"
			+ "\2\0\1\6\6\0\51\6\6\0\1\6\1\0\55\7\1\0\1\7" + "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\4\0\4\6"
			+ "\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7\3\0\53\6" + "\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"
			+ "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0" + "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"
			+ "\12\7\41\6\11\7\2\6\4\0\1\6\2\0\1\7\30\6\4\7" + "\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\4\0"
			+ "\13\6\65\0\25\6\1\0\10\6\25\0\61\7\66\6\3\7\1\6" + "\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0\20\6\3\7"
			+ "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6" + "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"
			+ "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7" + "\4\6\7\0\2\6\1\0\1\7\2\0\3\7\1\0\6\6\4\0"
			+ "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0" + "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"
			+ "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0" + "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"
			+ "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0" + "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"
			+ "\7\0\1\6\6\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0" + "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"
			+ "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0" + "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0"
			+ "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0" + "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0"
			+ "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0" + "\1\6\6\0\5\7\10\6\1\0\3\6\1\0\27\6\1\0\20\6"
			+ "\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0" + "\3\6\5\0\2\6\2\7\2\0\12\7\20\0\1\6\3\7\1\0"
			+ "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0" + "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"
			+ "\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\15\0\4\7" + "\1\0\10\6\1\0\3\6\1\0\51\6\2\7\1\6\7\7\1\0"
			+ "\3\7\1\0\4\7\1\6\5\0\3\6\1\7\7\0\3\6\2\7" + "\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6"
			+ "\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7" + "\1\0\1\7\1\0\10\7\6\0\12\7\2\0\2\7\15\0\60\6"
			+ "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6" + "\1\0\1\6\1\0\5\6\1\0\30\6\1\0\1\6\1\0\12\6"
			+ "\1\7\2\6\11\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7" + "\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7"
			+ "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0" + "\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0"
			+ "\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6" + "\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6"
			+ "\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0" + "\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"
			+ "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0" + "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"
			+ "\103\6\2\0\3\7\40\0\20\6\20\0\126\6\2\0\6\6\3\0" + "\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\13\6\7\0"
			+ "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7" + "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0"
			+ "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\4\7\1\0\12\7" + "\6\0\131\6\7\0\5\6\2\7\42\6\1\7\1\6\5\0\106\6"
			+ "\12\0\37\6\1\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0" + "\5\6\13\0\54\6\4\0\32\6\6\0\12\7\46\0\27\6\5\7"
			+ "\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0" + "\1\6\10\0\16\7\102\0\5\7\57\6\21\7\7\6\4\0\12\7"
			+ "\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7" + "\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\2\0"
			+ "\11\6\7\0\53\6\2\0\3\6\20\0\3\7\1\0\25\7\4\6" + "\1\7\6\6\1\7\2\6\3\7\1\6\5\0\300\6\72\7\1\0"
			+ "\5\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6" + "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"
			+ "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6" + "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7"
			+ "\30\0\1\111\1\111\5\7\20\0\2\6\23\0\1\6\13\0\5\7" + "\1\0\12\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\40\6"
			+ "\20\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6" + "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"
			+ "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6" + "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"
			+ "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6" + "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"
			+ "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0" + "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"
			+ "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7" + "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\53\6\1\0\136\6"
			+ "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51f0\6\20\0\u048d\6"
			+ "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6" + "\1\7\4\0\12\7\1\0\37\6\2\7\120\6\2\7\45\0\11\6"
			+ "\2\0\147\6\2\0\65\6\2\0\5\6\60\0\13\6\1\7\3\6" + "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"
			+ "\2\7\62\6\22\7\12\0\12\7\6\0\22\7\6\6\3\0\1\6" + "\1\0\2\6\13\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6"
			+ "\3\0\4\7\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7" + "\12\6\12\7\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6"
			+ "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7" + "\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0"
			+ "\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0" + "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0"
			+ "\14\6\10\0\163\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6"
			+ "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6" + "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"
			+ "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6" + "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\20\7"
			+ "\3\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6" + "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"
			+ "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6" + "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6"
			+ "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6" + "\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6"
			+ "\17\0\1\7\37\0\40\6\15\0\36\6\5\0\46\6\5\7\5\0" + "\36\6\2\0\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0"
			+ "\12\7\6\0\44\6\4\0\44\6\4\0\50\6\10\0\64\6\234\0" + "\u0137\6\11\0\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0"
			+ "\54\6\1\0\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0" + "\37\6\101\0\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0"
			+ "\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7" + "\4\6\1\0\3\6\1\0\35\6\2\0\3\7\4\0\1\7\40\0"
			+ "\35\6\3\0\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6" + "\12\0\26\6\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6"
			+ "\15\0\63\6\15\0\44\6\4\7\10\0\12\7\u01c6\0\35\6\12\0"
			+ "\1\6\10\0\26\6\13\7\217\0\27\6\11\0\3\7\65\6\17\7" + "\37\0\12\7\17\0\4\7\55\6\13\7\2\0\1\7\17\0\1\7"
			+ "\2\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7" + "\4\0\1\6\2\7\11\0\43\6\1\7\2\0\1\6\11\0\3\7"
			+ "\60\6\16\7\4\6\4\0\4\7\3\0\12\7\1\6\1\0\1\6" + "\43\0\22\6\1\0\31\6\14\7\6\0\1\7\101\0\7\6\1\0"
			+ "\1\6\1\0\4\6\1\0\17\6\1\0\12\6\7\0\57\6\14\7" + "\5\0\12\7\6\0\4\7\1\0\10\6\2\0\2\6\2\0\26\6"
			+ "\1\0\7\6\1\0\2\6\1\0\5\6\1\0\2\7\1\6\7\7" + "\2\0\2\7\2\0\3\7\2\0\1\6\6\0\1\7\5\0\5\6"
			+ "\2\7\2\0\7\7\3\0\5\7\213\0\65\6\22\7\4\6\5\0" + "\12\7\4\0\1\7\1\6\40\0\60\6\24\7\2\6\1\0\1\6"
			+ "\10\0\12\7\246\0\57\6\7\7\2\0\11\7\27\0\4\6\2\7" + "\42\0\60\6\21\7\3\0\1\6\13\0\12\7\46\0\53\6\15\7"
			+ "\1\6\7\0\12\7\66\0\33\6\2\0\17\7\4\0\12\7\306\0" + "\54\6\17\7\145\0\100\6\12\7\25\0\1\6\240\0\10\6\2\0"
			+ "\47\6\7\7\2\0\7\7\1\6\1\0\1\6\1\7\33\0\1\6" + "\12\7\50\6\7\7\1\6\4\7\10\0\1\7\10\0\1\6\13\7"
			+ "\56\6\20\7\3\0\1\6\42\0\71\6\u0107\0\11\6\1\0\45\6" + "\10\7\1\0\10\7\1\6\17\0\12\7\30\0\36\6\2\0\26\7"
			+ "\1\0\16\7\111\0\7\6\1\0\2\6\1\0\46\6\6\7\3\0" + "\1\7\1\0\2\7\1\0\7\7\1\6\1\7\10\0\12\7\6\0"
			+ "\6\6\1\0\2\6\1\0\40\6\5\7\1\0\2\7\1\0\5\7" + "\1\6\7\0\12\7\u0136\0\23\6\4\7\346\0\4\6\37\0\u039a\6"
			+ "\146\0\157\6\21\0\304\6\u0abc\0\u042f\6\1\0\11\7\u0fc7\0\u0247\6"
			+ "\u21b9\0\u0239\6\7\0\37\6\1\0\12\7\146\0\36\6\2\0\5\7"
			+ "\13\0\60\6\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0" + "\23\6\u02b0\0\100\6\200\0\113\6\4\0\1\7\1\6\67\7\7\0"
			+ "\4\7\15\6\100\0\2\6\1\0\1\6\34\0\u17f8\6\10\0\u02f3\6"
			+ "\u250d\0\u011f\6\61\0\3\6\21\0\4\6\10\0\u018c\6\u0904\0\153\6"
			+ "\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7\1\0\4\7" + "\u14c1\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7"
			+ "\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6" + "\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6"
			+ "\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6" + "\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6"
			+ "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6" + "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6"
			+ "\2\0\62\7\u0200\0\67\7\4\0\62\7\10\0\1\7\16\0\1\7" + "\26\0\5\7\1\0\17\7\u0550\0\7\7\1\0\21\7\2\0\7\7"
			+ "\1\0\2\7\1\0\5\7\325\0\55\6\3\0\7\7\7\6\2\0" + "\12\7\4\0\1\6\u0171\0\54\6\16\7\5\0\1\6\u0500\0\305\6"
			+ "\13\0\7\7\51\0\104\6\7\7\1\6\4\0\12\7\u0356\0\1\6" + "\u014f\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6" + "\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6"
			+ "\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6" + "\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6"
			+ "\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6" + "\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6"
			+ "\13\0\336\6\2\0\u1682\6\16\0\u1d31\6\u0c1f\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
			+ "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"
			+ "\1\10\1\11\1\12\22\5\1\13\1\14\1\15\1\16" + "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36" + "\1\37\2\40\1\41\2\1\2\42\1\1\1\2\1\0"
			+ "\1\43\1\44\1\45\1\46\1\47\1\0\3\45\1\50" + "\1\46\1\0\1\51\1\52\1\53\1\0\23\5\1\54"
			+ "\10\5\1\55\2\5\1\56\13\5\1\57\1\60\1\61" + "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"
			+ "\1\72\1\73\1\74\1\75\2\76\1\77\1\100\1\101" + "\1\102\1\103\1\104\1\105\1\106\1\107\12\75\1\0"
			+ "\1\110\2\111\2\45\1\46\2\0\16\5\1\112\13\5" + "\1\113\2\5\1\114\2\5\1\115\5\5\1\116\13\5"
			+ "\1\117\1\120\1\121\1\76\1\0\1\122\1\0\1\123" + "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"
			+ "\1\111\2\45\1\0\6\5\1\134\7\5\1\135\1\5" + "\1\136\1\5\1\137\4\5\1\140\1\141\1\142\2\5"
			+ "\1\143\16\5\1\144\1\5\1\145\2\5\1\146\1\111" + "\2\45\1\0\1\5\1\147\1\150\1\5\1\151\1\152"
			+ "\3\5\1\153\1\154\2\5\1\155\1\5\1\156\1\157" + "\1\5\1\160\6\5\1\161\2\5\1\162\1\163\1\164"
			+ "\5\5\1\165\1\166\1\111\2\45\1\0\2\5\1\167" + "\2\5\1\170\1\5\1\171\1\172\2\5\1\173\2\5"
			+ "\1\174\1\5\1\175\5\5\1\176\1\5\1\111\2\45" + "\1\0\1\5\1\177\4\5\1\200\3\5\1\201\1\202"
			+ "\1\203\1\5\1\204\1\5\1\111\2\45\1\0\1\205" + "\1\206\2\5\1\207\4\5\1\210\1\111\2\45\1\0"
			+ "\1\5\1\211\1\5\1\212\1\5\1\213\1\111\2\45" + "\1\0\1\5\1\214\1\215\1\0\2\45\1\216\1\5"
			+ "\1\0\2\45\1\217\1\0\2\45\1\0\2\45\1\0" + "\2\45\1\0\2\45\1\0\1\45\1\46\1\0\5\46";

	private static int[] zzUnpackAction() {
		int[] result = new int[438];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\114\0\230\0\344\0\u0130\0\344\0\u017c\0\u01c8"
			+ "\0\u0214\0\u0260\0\u02ac\0\u02f8\0\u0344\0\344\0\344\0\u0390"
			+ "\0\u03dc\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0"
			+ "\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850"
			+ "\0\u089c\0\344\0\344\0\344\0\344\0\344\0\344\0\344"
			+ "\0\344\0\u08e8\0\u0934\0\u0980\0\u09cc\0\344\0\344\0\344"
			+ "\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\344"
			+ "\0\344\0\u0c2c\0\u0c78\0\u0cc4\0\344\0\u0d10\0\u0d5c\0\u0da8"
			+ "\0\344\0\344\0\u0df4\0\u0e40\0\344\0\u0e8c\0\u0ed8\0\u0f24"
			+ "\0\u0f70\0\344\0\u0fbc\0\u1008\0\344\0\344\0\344\0\u1054"
			+ "\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4"
			+ "\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514"
			+ "\0\u1560\0\u15ac\0\u15f8\0\u0214\0\u1644\0\u1690\0\u16dc\0\u1728"
			+ "\0\u1774\0\u17c0\0\u180c\0\u1858\0\u0214\0\u18a4\0\u18f0\0\u193c"
			+ "\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c"
			+ "\0\u1be8\0\u1c34\0\u1c80\0\344\0\344\0\u1ccc\0\344\0\u1d18"
			+ "\0\344\0\344\0\344\0\344\0\344\0\344\0\344\0\344"
			+ "\0\344\0\344\0\u1d64\0\u1db0\0\344\0\344\0\344\0\344"
			+ "\0\344\0\344\0\344\0\344\0\344\0\u1dfc\0\u1e48\0\u1e94"
			+ "\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4"
			+ "\0\344\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308"
			+ "\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568"
			+ "\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\u0214\0\u277c"
			+ "\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u29dc"
			+ "\0\u2a28\0\u2a74\0\u0214\0\u2ac0\0\u2b0c\0\u0214\0\u2b58\0\u2ba4"
			+ "\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u0214\0\u2db8"
			+ "\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018"
			+ "\0\u3064\0\u30b0\0\344\0\u30fc\0\344\0\344\0\u1e48\0\344"
			+ "\0\u3148\0\344\0\344\0\344\0\344\0\344\0\344\0\344"
			+ "\0\344\0\344\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310"
			+ "\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u0214\0\u348c\0\u34d8\0\u3524"
			+ "\0\u3570\0\u35bc\0\u3608\0\u3654\0\u0214\0\u36a0\0\u0214\0\u36ec"
			+ "\0\u0214\0\u3738\0\u3784\0\u37d0\0\u381c\0\u0214\0\u0214\0\u0214"
			+ "\0\u3868\0\u38b4\0\u0214\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30"
			+ "\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90"
			+ "\0\u3cdc\0\u0214\0\u3d28\0\u0214\0\u3d74\0\u3dc0\0\344\0\u3e0c"
			+ "\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u0214\0\u0214\0\u3f88\0\u0214"
			+ "\0\u0214\0\u3fd4\0\u4020\0\u406c\0\u0214\0\u0214\0\u40b8\0\u4104"
			+ "\0\u4150\0\u419c\0\u0214\0\u0214\0\u41e8\0\u0214\0\u4234\0\u4280"
			+ "\0\u42cc\0\u4318\0\u4364\0\u43b0\0\u0214\0\u43fc\0\u4448\0\u0214"
			+ "\0\u0214\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610\0\u0214"
			+ "\0\u0214\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u0214"
			+ "\0\u4824\0\u4870\0\u0214\0\u48bc\0\u0214\0\u0214\0\u4908\0\u4954"
			+ "\0\u0214\0\u49a0\0\u49ec\0\u0214\0\u4a38\0\u0214\0\u4a84\0\u4ad0"
			+ "\0\u4b1c\0\u4b68\0\u4bb4\0\u0214\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4"
			+ "\0\u4d30\0\u4d7c\0\u0214\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u0214"
			+ "\0\u4ef8\0\u4f44\0\u4f90\0\u0214\0\u0214\0\u0214\0\u4fdc\0\u0214"
			+ "\0\u5028\0\u5074\0\u50c0\0\u510c\0\u5158\0\u0214\0\u0214\0\u51a4"
			+ "\0\u51f0\0\u0214\0\u523c\0\u5288\0\u52d4\0\u5320\0\u0214\0\u536c"
			+ "\0\u53b8\0\u5404\0\u5450\0\u549c\0\u0214\0\u54e8\0\u0214\0\u5534"
			+ "\0\u0214\0\u5580\0\u55cc\0\u5618\0\u5664\0\u56b0\0\u0214\0\u0214"
			+ "\0\u56fc\0\u5748\0\u5794\0\344\0\u57e0\0\u582c\0\u5878\0\u58c4"
			+ "\0\u0214\0\u5910\0\u595c\0\u59a8\0\u59f4\0\u5a40\0\u5a8c\0\u5ad8"
			+ "\0\u5b24\0\u5b70\0\u5bbc\0\u5c08\0\u5c54\0\u5ca0\0\u5cec\0\u5cec"
			+ "\0\u5d38\0\u5d84\0\u5dd0\0\u5e1c\0\u5e68\0\u5eb4";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[438];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"
			+ "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16" + "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"
			+ "\1\26\1\27\1\30\1\31\3\11\1\32\1\33\1\34" + "\1\11\1\35\1\11\1\36\1\37\1\40\1\41\1\11"
			+ "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" + "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"
			+ "\1\62\1\63\1\64\1\65\5\13\1\11\1\4\1\6" + "\1\4\1\66\1\67\1\70\21\66\1\71\1\66\1\72"
			+ "\65\66\1\73\1\74\1\75\22\73\1\4\1\76\65\73" + "\116\0\1\6\115\0\1\77\1\100\61\0\1\101\113\0"
			+ "\1\102\32\0\13\11\1\0\1\11\4\0\30\11\24\0" + "\6\11\2\0\1\11\10\0\1\103\1\104\1\105\1\106"
			+ "\1\0\1\107\1\110\1\111\1\112\1\113\1\114\13\0" + "\1\105\1\114\6\0\1\115\1\106\1\112\32\0\1\107"
			+ "\2\111\1\104\1\111\1\115\13\0\2\13\1\105\2\0" + "\3\13\1\112\1\113\1\114\13\0\1\105\1\114\6\0"
			+ "\1\115\1\0\1\112\32\0\5\13\1\115\13\0\2\113" + "\3\0\3\113\63\0\5\113\27\0\1\116\43\0\1\117"
			+ "\13\0\1\120\16\0\13\11\1\0\1\11\4\0\1\11" + "\1\121\2\11\1\122\23\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\4\11\1\123\1\11" + "\1\124\1\125\1\126\2\11\1\127\14\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11" + "\1\130\7\11\1\131\1\132\1\11\1\133\7\11\1\134"
			+ "\1\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\4\11\1\135\7\11\1\136\13\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\10\11\1\137\17\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\1\140\5\11\1\141\1\142" + "\4\11\1\143\13\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\21\11\1\144\6\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\6\11\1\145\21\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\146\1\11\1\147"
			+ "\6\11\1\150\7\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\1\151\7\11\1\152\5\11"
			+ "\1\153\11\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\11\11\1\154\7\11\1\155\1\156"
			+ "\5\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\11\11\1\157\16\11\24\0\6\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\160" + "\1\11\1\161\17\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\1\162\5\11\1\163\1\164" + "\5\11\1\165\12\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\1\166\3\11\1\167\11\11" + "\1\170\11\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\6\11\1\171\21\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"
			+ "\1\172\21\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\14\11\1\173\13\11\24\0\6\11"
			+ "\2\0\1\11\67\0\1\174\113\0\1\175\1\176\112\0" + "\1\177\1\0\1\200\111\0\1\201\113\0\1\202\6\0"
			+ "\1\203\104\0\1\204\7\0\1\205\103\0\1\206\10\0" + "\1\207\102\0\1\210\113\0\1\211\24\0\1\66\2\0"
			+ "\21\66\1\0\1\66\1\0\65\66\2\0\1\70\111\0" + "\1\212\2\0\5\212\1\213\4\212\2\213\1\214\4\212"
			+ "\1\215\1\216\1\217\1\212\1\220\1\212\1\221\1\222" + "\4\212\1\223\7\212\1\224\32\212\1\213\2\214\1\212"
			+ "\1\214\1\212\30\0\1\225\70\0\1\75\111\0\1\212" + "\2\0\5\212\1\226\4\212\2\226\1\227\4\212\1\230"
			+ "\1\231\1\232\1\212\1\233\1\212\1\234\1\235\4\212" + "\1\236\7\212\1\237\32\212\1\226\2\227\1\212\1\227"
			+ "\1\212\3\0\1\77\1\5\1\6\111\77\5\100\1\240" + "\106\100\10\0\1\103\1\104\1\241\2\0\1\107\1\110"
			+ "\1\111\1\112\1\113\1\114\13\0\1\241\1\114\6\0" + "\1\115\1\0\1\112\32\0\1\107\2\111\1\104\1\111"
			+ "\1\115\13\0\2\104\3\0\3\104\1\112\1\113\1\114" + "\14\0\1\114\6\0\1\115\1\0\1\112\32\0\5\104"
			+ "\1\115\13\0\1\242\1\243\2\0\5\243\1\0\1\243" + "\4\0\2\243\3\0\1\243\2\0\1\243\6\0\1\243"
			+ "\1\0\1\243\32\0\6\243\13\0\1\244\1\104\1\241" + "\2\0\3\244\1\112\1\113\1\114\13\0\1\241\1\114"
			+ "\6\0\1\115\1\0\1\112\32\0\3\244\1\104\1\244" + "\1\115\13\0\1\111\1\104\1\241\2\0\3\111\1\112"
			+ "\1\113\1\114\13\0\1\241\1\114\6\0\1\115\1\0" + "\1\112\32\0\3\111\1\104\1\111\1\115\13\0\1\245"
			+ "\1\104\1\241\2\0\3\245\1\112\1\113\1\114\13\0" + "\1\241\1\114\6\0\1\115\1\0\1\112\32\0\3\245"
			+ "\1\104\1\245\1\115\13\0\2\113\3\0\3\113\1\112" + "\1\0\1\114\14\0\1\114\6\0\1\115\1\0\1\112"
			+ "\32\0\5\113\1\115\13\0\2\246\3\0\3\246\3\0" + "\1\247\54\0\1\247\2\0\5\246\22\0\1\250\103\0"
			+ "\13\11\1\0\1\11\4\0\2\11\1\251\25\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\4\11\1\252\23\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\10\11\1\253\17\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\6\11\1\254\21\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\6\11\1\255\21\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\24\11\1\256\3\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\3\11\1\257\24\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\1\260\3\11\1\261\23\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\11\11\1\262\16\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\6\11\1\263\21\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\23\11\1\264\4\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\15\11\1\265\12\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\1\266\12\11\1\267" + "\2\11\1\270\11\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\4\11\1\271\10\11\1\272" + "\12\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\3\11\1\273\24\11\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\274"
			+ "\1\275\24\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\11\11\1\276\16\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\277" + "\27\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\1\300\27\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\11\11\1\301\16\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\2\11\1\302\25\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\17\11\1\303\10\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\3\11\1\304\24\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\3\11\1\305\24\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\26\11\1\306\1\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\7\11\1\307\20\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\2\11\1\310\1\311\24\11\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\23\11\1\312"
			+ "\4\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\3\11\1\313\24\11\24\0\6\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\314" + "\11\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\21\11\1\315\6\11\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\316"
			+ "\20\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\4\11\1\317\23\11\24\0\6\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\320" + "\21\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\11\11\1\321\16\11\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\322"
			+ "\22\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\6\11\1\323\6\11\1\324\12\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\1\11\1\325\26\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\3\11\1\326\24\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\7\11\1\327\5\11\1\330\12\11\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\331"
			+ "\4\11\1\332\12\11\24\0\6\11\2\0\1\11\67\0" + "\1\333\1\334\112\0\1\335\34\0\1\214\4\0\3\214"
			+ "\63\0\3\214\1\0\1\214\14\0\1\336\4\0\3\336" + "\63\0\3\336\1\0\1\336\14\0\1\337\4\0\3\337"
			+ "\5\0\1\340\55\0\3\337\1\0\1\337\14\0\1\341" + "\4\0\3\341\5\0\1\340\55\0\3\341\1\0\1\341"
			+ "\31\0\1\342\113\0\1\343\113\0\1\344\113\0\1\345" + "\113\0\1\346\113\0\1\347\113\0\1\350\113\0\1\351"
			+ "\66\0\4\100\1\6\1\240\106\100\10\0\1\242\1\243" + "\1\352\1\0\5\243\1\0\1\243\4\0\2\243\3\0"
			+ "\1\243\1\0\1\352\1\243\6\0\1\243\1\0\1\243" + "\32\0\6\243\13\0\2\353\1\352\1\0\5\353\1\0"
			+ "\1\353\4\0\2\353\3\0\1\353\1\0\1\352\1\353" + "\6\0\1\353\1\0\1\353\32\0\6\353\13\0\1\354"
			+ "\1\104\1\241\2\0\3\354\1\112\1\113\1\114\13\0" + "\1\241\1\114\6\0\1\115\1\0\1\112\32\0\3\354"
			+ "\1\104\1\354\1\115\13\0\1\355\1\104\1\241\2\0" + "\3\355\1\112\1\113\1\114\13\0\1\241\1\114\6\0"
			+ "\1\115\1\0\1\112\32\0\3\355\1\104\1\355\1\115" + "\13\0\2\246\3\0\3\246\1\112\25\0\1\115\1\0"
			+ "\1\112\32\0\5\246\1\115\13\0\2\246\3\0\3\246" + "\63\0\5\246\110\0\1\356\15\0\13\11\1\0\1\11"
			+ "\4\0\3\11\1\357\24\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\1\360\27\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\1\361\27\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\7\11\1\362\20\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"
			+ "\1\363\22\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\15\11\1\364\12\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11" + "\1\365\17\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\3\11\1\366\24\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"
			+ "\1\367\12\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\5\11\1\370\22\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11" + "\1\371\23\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\10\11\1\372\17\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"
			+ "\1\373\24\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\11\11\1\374\16\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11" + "\1\375\17\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\6\11\1\376\21\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"
			+ "\1\377\25\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\16\11\1\u0100\11\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11" + "\1\u0101\17\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\5\11\1\u0102\22\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"
			+ "\1\u0103\1\u0104\24\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\2\11\1\u0105\25\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\4\11\1\u0106\23\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\24\11\1\u0107\3\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\10\11\1\u0108\17\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\10\11\1\u0109\17\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\15\11\1\u010a\12\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\7\11\1\u010b\20\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\3\11\1\u010c\24\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\10\11\1\u010d\17\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\6\11\1\u010e\1\u010f\20\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0110\12\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\1\11\1\u0111\26\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\1\u0112\27\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\2\11\1\u0113\25\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\1\u0114\27\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0115"
			+ "\27\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\12\11\1\u0116\15\11\24\0\6\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u0117" + "\24\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\25\11\1\u0118\2\11\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u0119"
			+ "\20\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\6\11\1\u011a\21\11\24\0\6\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\1\u011b\27\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\17\11\1\u011c\10\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\4\11\1\u011d\23\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\7\11\1\u011e\20\11\24\0\6\11\2\0\1\11"
			+ "\67\0\1\u011f\51\0\1\340\76\0\2\u0120\1\352\1\0" + "\5\u0120\1\0\1\u0120\4\0\2\u0120\3\0\1\u0120\1\0"
			+ "\1\352\1\u0120\6\0\1\u0120\1\0\1\u0120\32\0\6\u0120"
			+ "\13\0\1\u0121\1\104\1\241\2\0\3\u0121\1\112\1\113" + "\1\114\13\0\1\241\1\114\6\0\1\115\1\0\1\112"
			+ "\32\0\3\u0121\1\104\1\u0121\1\115\13\0\1\u0122\1\104" + "\1\241\2\0\3\u0122\1\112\1\113\1\114\13\0\1\241"
			+ "\1\114\6\0\1\115\1\0\1\112\32\0\3\u0122\1\104" + "\1\u0122\1\115\110\0\1\u0123\14\0\13\11\1\0\1\11"
			+ "\4\0\4\11\1\u0124\23\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\13\11\1\u0125\14\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\12\11\1\u0126\15\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0127\17\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\12\11\1\u0128\15\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\11\11\1\u0129\16\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\15\11\1\u012a\12\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\5\11\1\u012b\22\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\14\11\1\u012c\13\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\3\11\1\u012d\24\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\4\11\1\u012e\23\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\5\11\1\u012f\22\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\2\11\1\u0130\25\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\26\11\1\u0131\1\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\4\11\1\u0132\23\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\14\11\1\u0133\13\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\3\11\1\u0134\24\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0135\12\11"
			+ "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\2\11\1\u0136\25\11\24\0\6\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\11\11\1\u0137\16\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\25\11\1\u0138\2\11\24\0\6\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\1\u0139\27\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\4\11\1\u013a\23\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\4\11\1\u013b\23\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\10\11\1\u013c\17\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\u013d\20\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\7\11\1\u013e\20\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\16\11\1\u013f\11\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\10\11\1\u0140\17\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\3\11\1\u0141\24\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\7\11\1\u0142\20\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\1\u0143\27\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"
			+ "\1\u0144\17\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\1\u0145\27\11\24\0\6\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u0146" + "\12\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\3\11\1\u0147\24\11\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0148"
			+ "\17\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\10\11\1\u0149\17\11\24\0\6\11\2\0"
			+ "\1\11\10\0\2\u014a\1\352\1\0\5\u014a\1\0\1\u014a" + "\4\0\2\u014a\3\0\1\u014a\1\0\1\352\1\u014a\6\0"
			+ "\1\u014a\1\0\1\u014a\32\0\6\u014a\13\0\1\u014b\1\104" + "\1\241\2\0\3\u014b\1\112\1\113\1\114\13\0\1\241"
			+ "\1\114\6\0\1\115\1\0\1\112\32\0\3\u014b\1\104" + "\1\u014b\1\115\13\0\1\u014c\1\104\1\241\2\0\3\u014c"
			+ "\1\112\1\113\1\114\13\0\1\241\1\114\6\0\1\115" + "\1\0\1\112\32\0\3\u014c\1\104\1\u014c\1\115\107\0"
			+ "\1\u014d\15\0\13\11\1\0\1\11\4\0\1\u014e\27\11" + "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\1\u014f\27\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\5\11\1\u0150\22\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\3\11\1\u0151\24\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\4\11\1\u0152\23\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\14\11\1\u0153\13\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\15\11\1\u0154\12\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\2\11\1\u0155\25\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\11\11\1\u0156\16\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\11\11\1\u0157\16\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\17\11\1\u0158\10\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\10\11\1\u0159\17\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\11\11\1\u015a\16\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\21\11\1\u015b\6\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\3\11\1\u015c\24\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\22\11\1\u015d\5\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\10\11\1\u015e\17\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\7\11\1\u015f\20\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\u0160\20\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\24\11\1\u0161\3\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\5\11\1\u0162\22\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\3\11\1\u0163\24\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\5\11\1\u0164\22\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\15\11\1\u0165\12\11\24\0\6\11\2\0\1\11\10\0"
			+ "\2\u0166\1\352\1\0\5\u0166\1\0\1\u0166\4\0\2\u0166" + "\3\0\1\u0166\1\0\1\352\1\u0166\6\0\1\u0166\1\0"
			+ "\1\u0166\32\0\6\u0166\13\0\1\u0167\1\104\1\241\2\0" + "\3\u0167\1\112\1\113\1\114\13\0\1\241\1\114\6\0"
			+ "\1\115\1\0\1\112\32\0\3\u0167\1\104\1\u0167\1\115" + "\13\0\1\u0168\1\104\1\241\2\0\3\u0168\1\112\1\113"
			+ "\1\114\13\0\1\241\1\114\6\0\1\115\1\0\1\112" + "\32\0\3\u0168\1\104\1\u0168\1\115\111\0\1\u0169\13\0"
			+ "\13\11\1\0\1\11\4\0\5\11\1\u016a\22\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\11\11\1\u016b\16\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\21\11\1\u016c\6\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\6\11\1\u016d\21\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\10\11\1\u016e\17\11\24\0" + "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\16\11\1\u016f\11\11\24\0\6\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\2\11\1\u0170\25\11\24\0"
			+ "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\5\11\1\u0171\22\11\24\0\6\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\1\u0172\27\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"
			+ "\1\u0173\17\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\3\11\1\u0174\24\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\13\11" + "\1\u0175\14\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\10\11\1\u0176\17\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"
			+ "\1\u0177\24\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\10\11\1\u0178\17\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11" + "\1\u0179\20\11\24\0\6\11\2\0\1\11\10\0\2\u017a"
			+ "\1\352\1\0\5\u017a\1\0\1\u017a\4\0\2\u017a\3\0" + "\1\u017a\1\0\1\352\1\u017a\6\0\1\u017a\1\0\1\u017a"
			+ "\32\0\6\u017a\13\0\1\u017b\1\104\1\241\2\0\3\u017b" + "\1\112\1\113\1\114\13\0\1\241\1\114\6\0\1\115"
			+ "\1\0\1\112\32\0\3\u017b\1\104\1\u017b\1\115\13\0" + "\1\u017c\1\104\1\241\2\0\3\u017c\1\112\1\113\1\114"
			+ "\13\0\1\241\1\114\6\0\1\115\1\0\1\112\32\0" + "\3\u017c\1\104\1\u017c\1\115\20\0\1\u017d\104\0\13\11"
			+ "\1\0\1\11\4\0\3\11\1\u017e\24\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"
			+ "\1\u017f\4\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\11\11\1\u0180\16\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11" + "\1\u0181\16\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\10\11\1\u0182\17\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"
			+ "\1\u0183\17\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\5\11\1\u0184\22\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11" + "\1\u0185\16\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\10\11\1\u0186\17\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"
			+ "\1\u0187\17\11\24\0\6\11\2\0\1\11\10\0\2\u0188" + "\1\352\1\0\5\u0188\1\0\1\u0188\4\0\2\u0188\3\0"
			+ "\1\u0188\1\0\1\352\1\u0188\6\0\1\u0188\1\0\1\u0188"
			+ "\32\0\6\u0188\13\0\1\u0189\1\104\1\241\2\0\3\u0189" + "\1\112\1\113\1\114\13\0\1\241\1\114\6\0\1\115"
			+ "\1\0\1\112\32\0\3\u0189\1\104\1\u0189\1\115\13\0" + "\1\u018a\1\104\1\241\2\0\3\u018a\1\112\1\113\1\114"
			+ "\13\0\1\241\1\114\6\0\1\115\1\0\1\112\32\0" + "\3\u018a\1\104\1\u018a\1\115\112\0\1\u018b\12\0\13\11"
			+ "\1\0\1\11\4\0\15\11\1\u018c\12\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"
			+ "\1\u018d\24\11\24\0\6\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\6\11\1\u018e\21\11\24\0\6\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11" + "\1\u018f\17\11\24\0\6\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\3\11\1\u0190\24\11\24\0\6\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\17\11"
			+ "\1\u0191\10\11\24\0\6\11\2\0\1\11\10\0\2\u0192" + "\1\352\1\0\5\u0192\1\0\1\u0192\4\0\2\u0192\3\0"
			+ "\1\u0192\1\0\1\352\1\u0192\6\0\1\u0192\1\0\1\u0192"
			+ "\32\0\6\u0192\13\0\1\u0193\1\104\1\241\2\0\3\u0193" + "\1\112\1\113\1\114\13\0\1\241\1\114\6\0\1\115"
			+ "\1\0\1\112\32\0\3\u0193\1\104\1\u0193\1\115\13\0" + "\1\u0194\1\104\1\241\2\0\3\u0194\1\112\1\113\1\114"
			+ "\13\0\1\241\1\114\6\0\1\115\1\0\1\112\32\0" + "\3\u0194\1\104\1\u0194\1\115\107\0\1\u0195\15\0\13\11"
			+ "\1\0\1\11\4\0\27\11\1\u0196\24\0\6\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\u0197"
			+ "\6\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\2\11\1\u0198\25\11\24\0\6\11\2\0"
			+ "\1\11\10\0\2\u0199\1\352\1\0\5\u0199\1\0\1\u0199" + "\4\0\2\u0199\3\0\1\u0199\1\0\1\352\1\u0199\6\0"
			+ "\1\u0199\1\0\1\u0199\32\0\6\u0199\13\0\1\u019a\1\104" + "\1\241\2\0\3\u019a\1\112\1\113\1\114\13\0\1\241"
			+ "\1\114\6\0\1\115\1\0\1\112\32\0\3\u019a\1\104" + "\1\u019a\1\115\13\0\1\u019b\1\104\1\241\2\0\3\u019b"
			+ "\1\112\1\113\1\114\13\0\1\241\1\114\6\0\1\115" + "\1\0\1\112\32\0\3\u019b\1\104\1\u019b\1\115\111\0"
			+ "\1\u019c\13\0\13\11\1\0\1\11\4\0\10\11\1\u019d" + "\17\11\24\0\6\11\2\0\1\11\10\0\2\u019e\1\352"
			+ "\1\0\5\u019e\1\0\1\u019e\4\0\2\u019e\3\0\1\u019e" + "\1\0\1\352\1\u019e\6\0\1\u019e\1\0\1\u019e\32\0"
			+ "\6\u019e\13\0\1\u019f\1\104\1\241\2\0\3\u019f\1\112" + "\1\113\1\114\13\0\1\241\1\114\6\0\1\115\1\0"
			+ "\1\112\32\0\3\u019f\1\104\1\u019f\1\115\13\0\1\u01a0" + "\1\104\1\241\2\0\3\u01a0\1\112\1\113\1\114\13\0"
			+ "\1\241\1\114\6\0\1\115\1\0\1\112\32\0\3\u01a0" + "\1\104\1\u01a0\1\115\11\0\13\11\1\0\1\11\4\0"
			+ "\17\11\1\u01a1\10\11\24\0\6\11\2\0\1\11\10\0" + "\2\u01a2\1\352\1\0\5\u01a2\1\0\1\u01a2\4\0\2\u01a2"
			+ "\3\0\1\u01a2\1\0\1\352\1\u01a2\6\0\1\u01a2\1\0" + "\1\u01a2\32\0\6\u01a2\13\0\1\u01a3\1\104\1\241\2\0"
			+ "\3\u01a3\1\112\1\113\1\114\13\0\1\241\1\114\6\0" + "\1\115\1\0\1\112\32\0\3\u01a3\1\104\1\u01a3\1\115"
			+ "\13\0\1\u01a4\1\104\1\241\2\0\3\u01a4\1\112\1\113" + "\1\114\13\0\1\241\1\114\6\0\1\115\1\0\1\112"
			+ "\32\0\3\u01a4\1\104\1\u01a4\1\115\13\0\2\u01a5\1\352"
			+ "\1\0\5\u01a5\1\0\1\u01a5\4\0\2\u01a5\3\0\1\u01a5" + "\1\0\1\352\1\u01a5\6\0\1\u01a5\1\0\1\u01a5\32\0"
			+ "\6\u01a5\13\0\1\u01a6\1\104\1\241\2\0\3\u01a6\1\112" + "\1\113\1\114\13\0\1\241\1\114\6\0\1\115\1\0"
			+ "\1\112\32\0\3\u01a6\1\104\1\u01a6\1\115\13\0\1\u01a7" + "\1\104\1\241\2\0\3\u01a7\1\112\1\113\1\114\13\0"
			+ "\1\241\1\114\6\0\1\115\1\0\1\112\32\0\3\u01a7" + "\1\104\1\u01a7\1\115\13\0\2\u01a8\1\352\1\0\5\u01a8"
			+ "\1\0\1\u01a8\4\0\2\u01a8\3\0\1\u01a8\1\0\1\352" + "\1\u01a8\6\0\1\u01a8\1\0\1\u01a8\32\0\6\u01a8\13\0"
			+ "\1\u01a9\1\104\1\241\2\0\3\u01a9\1\112\1\113\1\114" + "\13\0\1\241\1\114\6\0\1\115\1\0\1\112\32\0"
			+ "\3\u01a9\1\104\1\u01a9\1\115\13\0\1\u01aa\1\104\1\241"
			+ "\2\0\3\u01aa\1\112\1\113\1\114\13\0\1\241\1\114" + "\6\0\1\115\1\0\1\112\32\0\3\u01aa\1\104\1\u01aa"
			+ "\1\115\13\0\2\u01ab\1\352\1\0\5\u01ab\1\0\1\u01ab" + "\4\0\2\u01ab\3\0\1\u01ab\1\0\1\352\1\u01ab\6\0"
			+ "\1\u01ab\1\0\1\u01ab\32\0\6\u01ab\13\0\1\u01ac\1\104" + "\1\241\2\0\3\u01ac\1\112\1\113\1\114\13\0\1\241"
			+ "\1\114\6\0\1\115\1\0\1\112\32\0\3\u01ac\1\104" + "\1\u01ac\1\115\13\0\1\u01ad\1\104\1\241\2\0\3\u01ad"
			+ "\1\112\1\113\1\114\13\0\1\241\1\114\6\0\1\115" + "\1\0\1\112\32\0\3\u01ad\1\104\1\u01ad\1\115\13\0"
			+ "\2\u01ae\1\352\1\0\5\u01ae\1\0\1\u01ae\4\0\2\u01ae" + "\3\0\1\u01ae\1\0\1\352\1\u01ae\6\0\1\u01ae\1\0"
			+ "\1\u01ae\32\0\6\u01ae\13\0\1\u01af\1\104\1\241\2\0" + "\3\u01af\1\112\1\113\1\114\13\0\1\241\1\114\6\0"
			+ "\1\115\1\0\1\112\32\0\3\u01af\1\104\1\u01af\1\115" + "\13\0\1\u01b0\1\104\1\241\2\0\3\u01b0\1\112\1\113"
			+ "\1\114\13\0\1\241\1\114\6\0\1\115\1\0\1\112" + "\32\0\3\u01b0\1\104\1\u01b0\1\115\13\0\2\u01b1\1\352"
			+ "\1\0\5\u01b1\1\0\1\u01b1\4\0\2\u01b1\3\0\1\u01b1" + "\1\0\1\352\1\u01b1\6\0\1\u01b1\1\0\1\u01b1\32\0"
			+ "\6\u01b1\13\0\1\u01b2\1\104\1\241\2\0\3\u01b2\1\112" + "\1\113\1\114\13\0\1\241\1\114\6\0\1\115\1\0"
			+ "\1\112\32\0\3\u01b2\1\104\1\u01b2\1\115\15\0\1\352" + "\23\0\1\352\65\0\1\u01b3\1\104\1\241\2\0\3\u01b3"
			+ "\1\112\1\113\1\114\13\0\1\241\1\114\6\0\1\115" + "\1\0\1\112\32\0\3\u01b3\1\104\1\u01b3\1\115\13\0"
			+ "\1\u01b4\1\104\1\241\2\0\3\u01b4\1\112\1\113\1\114" + "\13\0\1\241\1\114\6\0\1\115\1\0\1\112\32\0"
			+ "\3\u01b4\1\104\1\u01b4\1\115\13\0\1\u01b5\1\104\1\241"
			+ "\2\0\3\u01b5\1\112\1\113\1\114\13\0\1\241\1\114" + "\6\0\1\115\1\0\1\112\32\0\3\u01b5\1\104\1\u01b5"
			+ "\1\115\13\0\1\u01b6\1\104\1\241\2\0\3\u01b6\1\112" + "\1\113\1\114\13\0\1\241\1\114\6\0\1\115\1\0"
			+ "\1\112\32\0\3\u01b6\1\104\1\u01b6\1\115\13\0\2\104" + "\1\241\2\0\3\104\1\112\1\113\1\114\13\0\1\241"
			+ "\1\114\6\0\1\115\1\0\1\112\32\0\5\104\1\115" + "\3\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[24320];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unknown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\11\1\1\1\11\7\1\2\11\22\1\10\11"
			+ "\4\1\3\11\7\1\2\11\3\1\1\11\2\1\1\0" + "\2\11\2\1\1\11\1\0\3\1\1\11\1\1\1\0"
			+ "\3\11\1\0\53\1\2\11\1\1\1\11\1\1\12\11" + "\2\1\11\11\12\1\1\0\1\11\5\1\2\0\62\1"
			+ "\1\11\1\1\2\11\1\0\1\11\1\0\11\11\3\1" + "\1\0\60\1\1\11\3\1\1\0\51\1\1\0\33\1"
			+ "\1\0\23\1\1\0\15\1\1\0\11\1\1\0\3\1" + "\1\0\2\1\1\11\1\1\1\0\3\1\1\0\2\1"
			+ "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1" + "\1\0\5\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[438];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of the
	 * yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the matched
	 * text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead. When a
	 * lead/high surrogate has been read from the input stream into the final
	 * zzBuffer position, this will have a value of 1; otherwise, it will have a
	 * value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/* user code: */
	StringBuilder string = new StringBuilder();

	private Symbol symbol(int type) {
		return new JavaSymbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object value) {
		return new JavaSymbol(type, yyline + 1, yycolumn + 1, value);
	}

	/**
	 * assumes correct representation of a long value for specified radix in scanner
	 * buffer from <code>start</code> to <code>end</code>
	 */
	private long parseLong(int start, int end, int radix) {
		long result = 0;
		long digit;

		for (int i = start; i < end; i++) {
			digit = Character.digit(yycharat(i), radix);
			result *= radix;
			result += digit;
		}

		return result;
	}

	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public Scanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x110000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 3636) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			/*
			 * If numRead == requested, we might have requested to few chars to encode a
			 * full Unicode character. We assume that a Reader would otherwise never return
			 * half characters.
			 */
			if (numRead == requested) {
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again. This number must not
	 *               be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end of
	 * file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				zzDoEOF();
				{
					return symbol(EOF);
				}
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 1: {
					throw new RuntimeException(
							"Illegal character \"" + yytext() + "\" at line " + yyline + ", column " + yycolumn);
				}
				case 144:
					break;
				case 2: { /* ignore */
				}
				case 145:
					break;
				case 3: {
					return symbol(DIV);
				}
				case 146:
					break;
				case 4: {
					return symbol(MULT);
				}
				case 147:
					break;
				case 5: {
					return symbol(IDENTIFIER, yytext());
				}
				case 148:
					break;
				case 6: {
					return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
				}
				case 149:
					break;
				case 7: {
					return symbol(DOT);
				}
				case 150:
					break;
				case 8: {
					return symbol(MINUS);
				}
				case 151:
					break;
				case 9: {
					yybegin(STRING);
					string.setLength(0);
				}
				case 152:
					break;
				case 10: {
					yybegin(CHARLITERAL);
				}
				case 153:
					break;
				case 11: {
					return symbol(LPAREN);
				}
				case 154:
					break;
				case 12: {
					return symbol(RPAREN);
				}
				case 155:
					break;
				case 13: {
					return symbol(LBRACE);
				}
				case 156:
					break;
				case 14: {
					return symbol(RBRACE);
				}
				case 157:
					break;
				case 15: {
					return symbol(LBRACK);
				}
				case 158:
					break;
				case 16: {
					return symbol(RBRACK);
				}
				case 159:
					break;
				case 17: {
					return symbol(SEMICOLON);
				}
				case 160:
					break;
				case 18: {
					return symbol(COMMA);
				}
				case 161:
					break;
				case 19: {
					return symbol(EQ);
				}
				case 162:
					break;
				case 20: {
					return symbol(GT);
				}
				case 163:
					break;
				case 21: {
					return symbol(LT);
				}
				case 164:
					break;
				case 22: {
					return symbol(NOT);
				}
				case 165:
					break;
				case 23: {
					return symbol(COMP);
				}
				case 166:
					break;
				case 24: {
					return symbol(QUESTION);
				}
				case 167:
					break;
				case 25: {
					return symbol(COLON);
				}
				case 168:
					break;
				case 26: {
					return symbol(AND);
				}
				case 169:
					break;
				case 27: {
					return symbol(OR);
				}
				case 170:
					break;
				case 28: {
					return symbol(PLUS);
				}
				case 171:
					break;
				case 29: {
					return symbol(XOR);
				}
				case 172:
					break;
				case 30: {
					return symbol(MOD);
				}
				case 173:
					break;
				case 31: {
					string.append(yytext());
				}
				case 174:
					break;
				case 32: {
					throw new RuntimeException("Unterminated string at end of line");
				}
				case 175:
					break;
				case 33: {
					yybegin(YYINITIAL);
					return symbol(STRING_LITERAL, string.toString());
				}
				case 176:
					break;
				case 34: {
					throw new RuntimeException("Unterminated character literal at end of line");
				}
				case 177:
					break;
				case 35: {
					return symbol(DIVEQ);
				}
				case 178:
					break;
				case 36: {
					return symbol(MULTEQ);
				}
				case 179:
					break;
				case 37: {
					return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
				}
				case 180:
					break;
				case 38: {
					return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
				}
				case 181:
					break;
				case 39: {
					return symbol(INTEGER_LITERAL, new Long(yytext().substring(0, yylength() - 1)));
				}
				case 182:
					break;
				case 40: {
					return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0, yylength() - 1)));
				}
				case 183:
					break;
				case 41: {
					return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0, yylength() - 1)));
				}
				case 184:
					break;
				case 42: {
					return symbol(MINUSMINUS);
				}
				case 185:
					break;
				case 43: {
					return symbol(MINUSEQ);
				}
				case 186:
					break;
				case 44: {
					return symbol(OF);
				}
				case 187:
					break;
				case 45: {
					return symbol(IF);
				}
				case 188:
					break;
				case 46: {
					return symbol(DO);
				}
				case 189:
					break;
				case 47: {
					return symbol(EQEQ);
				}
				case 190:
					break;
				case 48: {
					return symbol(GTEQ);
				}
				case 191:
					break;
				case 49: {
					return symbol(RSHIFT);
				}
				case 192:
					break;
				case 50: {
					return symbol(LTEQ);
				}
				case 193:
					break;
				case 51: {
					return symbol(LSHIFT);
				}
				case 194:
					break;
				case 52: {
					return symbol(NOTEQ);
				}
				case 195:
					break;
				case 53: {
					return symbol(ANDEQ);
				}
				case 196:
					break;
				case 54: {
					return symbol(ANDAND);
				}
				case 197:
					break;
				case 55: {
					return symbol(OREQ);
				}
				case 198:
					break;
				case 56: {
					return symbol(OROR);
				}
				case 199:
					break;
				case 57: {
					return symbol(PLUSEQ);
				}
				case 200:
					break;
				case 58: {
					return symbol(PLUSPLUS);
				}
				case 201:
					break;
				case 59: {
					return symbol(XOREQ);
				}
				case 202:
					break;
				case 60: {
					return symbol(MODEQ);
				}
				case 203:
					break;
				case 61: {
					throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
				}
				case 204:
					break;
				case 62: {
					char val = (char) Integer.parseInt(yytext().substring(1), 8);
					string.append(val);
				}
				case 205:
					break;
				case 63: {
					string.append('\"');
				}
				case 206:
					break;
				case 64: {
					string.append('\'');
				}
				case 207:
					break;
				case 65: {
					string.append('\\');
				}
				case 208:
					break;
				case 66: {
					string.append('\b');
				}
				case 209:
					break;
				case 67: {
					string.append('\t');
				}
				case 210:
					break;
				case 68: {
					string.append('\r');
				}
				case 211:
					break;
				case 69: {
					string.append('\n');
				}
				case 212:
					break;
				case 70: {
					string.append('\f');
				}
				case 213:
					break;
				case 71: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, yytext().charAt(0));
				}
				case 214:
					break;
				case 72: {
					return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength() - 1, 8)));
				}
				case 215:
					break;
				case 73: {
					return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
				}
				case 216:
					break;
				case 74: {
					return symbol(TRY);
				}
				case 217:
					break;
				case 75: {
					return symbol(END);
				}
				case 218:
					break;
				case 76: {
					return symbol(NEW);
				}
				case 219:
					break;
				case 77: {
					return symbol(INT);
				}
				case 220:
					break;
				case 78: {
					return symbol(FOR);
				}
				case 221:
					break;
				case 79: {
					return symbol(RSHIFTEQ);
				}
				case 222:
					break;
				case 80: {
					return symbol(URSHIFT);
				}
				case 223:
					break;
				case 81: {
					return symbol(LSHIFTEQ);
				}
				case 224:
					break;
				case 82: {
					yybegin(YYINITIAL);
					int val = Integer.parseInt(yytext().substring(1, yylength() - 1), 8);
					return symbol(CHARACTER_LITERAL, (char) val);
				}
				case 225:
					break;
				case 83: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\"');
				}
				case 226:
					break;
				case 84: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\'');
				}
				case 227:
					break;
				case 85: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\\');
				}
				case 228:
					break;
				case 86: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\b');
				}
				case 229:
					break;
				case 87: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\t');
				}
				case 230:
					break;
				case 88: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\r');
				}
				case 231:
					break;
				case 89: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\n');
				}
				case 232:
					break;
				case 90: {
					yybegin(YYINITIAL);
					return symbol(CHARACTER_LITERAL, '\f');
				}
				case 233:
					break;
				case 91: {
					return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength() - 1, 16)));
				}
				case 234:
					break;
				case 92: {
					return symbol(BYTE);
				}
				case 235:
					break;
				case 93: {
					return symbol(BOOLEAN_LITERAL, true);
				}
				case 236:
					break;
				case 94: {
					return symbol(THIS);
				}
				case 237:
					break;
				case 95: {
					return symbol(CASE);
				}
				case 238:
					break;
				case 96: {
					return symbol(CHAR);
				}
				case 239:
					break;
				case 97: {
					return symbol(LONG);
				}
				case 240:
					break;
				case 98: {
					return symbol(ELSE);
				}
				case 241:
					break;
				case 99: {
					return symbol(NULL_LITERAL);
				}
				case 242:
					break;
				case 100: {
					return symbol(GOTO);
				}
				case 243:
					break;
				case 101: {
					return symbol(VOID);
				}
				case 244:
					break;
				case 102: {
					return symbol(URSHIFTEQ);
				}
				case 245:
					break;
				case 103: {
					return symbol(ARRAY);
				}
				case 246:
					break;
				case 104: {
					return symbol(BREAK);
				}
				case 247:
					break;
				case 105: {
					return symbol(BLOCK);
				}
				case 248:
					break;
				case 106: {
					return symbol(BEGIN);
				}
				case 249:
					break;
				case 107: {
					return symbol(SHORT);
				}
				case 250:
					break;
				case 108: {
					return symbol(SUPER);
				}
				case 251:
					break;
				case 109: {
					return symbol(THROW);
				}
				case 252:
					break;
				case 110: {
					return symbol(CATCH);
				}
				case 253:
					break;
				case 111: {
					return symbol(CONST);
				}
				case 254:
					break;
				case 112: {
					return symbol(CLASS);
				}
				case 255:
					break;
				case 113: {
					return symbol(UNTIL);
				}
				case 256:
					break;
				case 114: {
					return symbol(BOOLEAN_LITERAL, false);
				}
				case 257:
					break;
				case 115: {
					return symbol(FLOAT);
				}
				case 258:
					break;
				case 116: {
					return symbol(FINAL);
				}
				case 259:
					break;
				case 117: {
					return symbol(WHERE);
				}
				case 260:
					break;
				case 118: {
					return symbol(WHILE);
				}
				case 261:
					break;
				case 119: {
					return symbol(STATIC);
				}
				case 262:
					break;
				case 120: {
					return symbol(SWITCH);
				}
				case 263:
					break;
				case 121: {
					return symbol(THROWS);
				}
				case 264:
					break;
				case 122: {
					return symbol(RETURN);
				}
				case 265:
					break;
				case 123: {
					return symbol(NATIVE);
				}
				case 266:
					break;
				case 124: {
					return symbol(IMPORT);
				}
				case 267:
					break;
				case 125: {
					return symbol(DOUBLE);
				}
				case 268:
					break;
				case 126: {
					return symbol(PUBLIC);
				}
				case 269:
					break;
				case 127: {
					return symbol(BOOLEAN);
				}
				case 270:
					break;
				case 128: {
					return symbol(EXTENDS);
				}
				case 271:
					break;
				case 129: {
					return symbol(DEFAULT);
				}
				case 272:
					break;
				case 130: {
					return symbol(FINALLY);
				}
				case 273:
					break;
				case 131: {
					return symbol(PACKAGE);
				}
				case 274:
					break;
				case 132: {
					return symbol(PRIVATE);
				}
				case 275:
					break;
				case 133: {
					return symbol(ABSTRACT);
				}
				case 276:
					break;
				case 134: {
					return symbol(STRICTFP);
				}
				case 277:
					break;
				case 135: {
					return symbol(CONTINUE);
				}
				case 278:
					break;
				case 136: {
					return symbol(VOLATILE);
				}
				case 279:
					break;
				case 137: {
					return symbol(TRANSIENT);
				}
				case 280:
					break;
				case 138: {
					return symbol(INTERFACE);
				}
				case 281:
					break;
				case 139: {
					return symbol(PROTECTED);
				}
				case 282:
					break;
				case 140: {
					return symbol(INSTANCEOF);
				}
				case 283:
					break;
				case 141: {
					return symbol(IMPLEMENTS);
				}
				case 284:
					break;
				case 142: {
					return symbol(INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
				}
				case 285:
					break;
				case 143: {
					return symbol(SYNCHRONIZED);
				}
				case 286:
					break;
				default:
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	/**
	 * Converts an int token code into the name of the token by reflection on the
	 * cup symbol class/interface sym
	 *
	 * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
	 */
	private String getTokenName(int token) {
		try {
			java.lang.reflect.Field[] classFields = sym.class.getFields();
			for (int i = 0; i < classFields.length; i++) {
				if (classFields[i].getInt(null) == token) {
					return classFields[i].getName();
				}
			}
		} catch (Exception e) {
			e.printStackTrace(System.err);
		}

		return "UNKNOWN TOKEN";
	}

	/**
	 * Same as next_token but also prints the token to standard out for debugging.
	 *
	 * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
	 */
	public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
		java_cup.runtime.Symbol s = next_token();
		System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1) + " --" + yytext() + "--"
				+ getTokenName(s.sym) + "--");
		return s;
	}

	/**
	 * Runs the scanner on input files.
	 *
	 * This main method is the debugging routine for the scanner. It prints
	 * debugging information about each returned token to System.out until the end
	 * of file is reached, or an error occured.
	 *
	 * @param argv the command line, contains the filenames to run the scanner on.
	 */
	public static void main(String argv[]) {
		if (argv.length == 0) {
			System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
		} else {
			int firstFilePos = 0;
			String encodingName = "UTF-8";
			if (argv[0].equals("--encoding")) {
				firstFilePos = 2;
				encodingName = argv[1];
				try {
					java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
				} catch (Exception e) {
					System.out.println("Invalid encoding '" + encodingName + "'");
					return;
				}
			}
			for (int i = firstFilePos; i < argv.length; i++) {
				Scanner scanner = null;
				try {
					java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
					java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
					scanner = new Scanner(reader);
					while (!scanner.zzAtEOF)
						scanner.debug_next_token();
				} catch (java.io.FileNotFoundException e) {
					System.out.println("File not found : \"" + argv[i] + "\"");
				} catch (java.io.IOException e) {
					System.out.println("IO error scanning file \"" + argv[i] + "\"");
					System.out.println(e);
				} catch (Exception e) {
					System.out.println("Unexpected exception:");
//					e.printStackTrace();
					StringWriter sw = new StringWriter();
					e.printStackTrace(new PrintWriter(sw));
					String fullStackTrace = sw.toString();
					String[] restrictedStackTrace = fullStackTrace.split(System.lineSeparator(), 2);
					System.err.print(restrictedStackTrace[0]);
				}
			}
		}
	}

}
